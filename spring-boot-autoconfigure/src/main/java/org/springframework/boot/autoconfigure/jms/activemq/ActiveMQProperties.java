/*
 * Copyright 2012-2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.boot.autoconfigure.jms.activemq;

import org.springframework.boot.context.properties.ConfigurationProperties;

/**
 * Configuration properties for ActiveMQ.
 *
 * @author Greg Turnquist
 * @author Stephane Nicoll
 * @author Aur√©lien Leboulanger
 */
@ConfigurationProperties(prefix = "spring.activemq")
public class ActiveMQProperties {

	/**
	 * URL of the ActiveMQ broker. Auto-generated by default.
	 */
	private String brokerUrl;

	/**
	 * Specify if the default broker URL should be in memory. Ignored if an explicit
	 * broker has been specified.
	 */
	private boolean inMemory = true;

	/**
	 * Login user of the broker.
	 */
	private String user;

	/**
	 * Login password of the broker.
	 */
	private String password;

	private Pool pool = new Pool();

	public String getBrokerUrl() {
		return this.brokerUrl;
	}

	public void setBrokerUrl(String brokerUrl) {
		this.brokerUrl = brokerUrl;
	}

	public boolean isInMemory() {
		return this.inMemory;
	}

	public void setInMemory(boolean inMemory) {
		this.inMemory = inMemory;
	}

	public String getUser() {
		return this.user;
	}

	public void setUser(String user) {
		this.user = user;
	}

	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public Pool getPool() {
		return this.pool;
	}

	public void setPool(Pool pool) {
		this.pool = pool;
	}

	protected static class Pool {

		/**
		 * Specify if a PooledConnectionFactory should be created instead of a regular
		 * ConnectionFactory.
		 */
		private boolean enabled;

		/**
		 * Sets the maximum number of pooled Connections.
		 */
		private int maxConnections = 1;

		/**
		 * Sets the idle timeout value for Connection's that are created by this pool in Milliseconds.
		 */
		private int idleTimeMillis = 30 * 1000;

		/**
		 * Allow connections to expire, irrespective of load or idle time.
		 */
		private long expiryTimeMillis = 0L;

		/**
		 * Sets the maximum number of active sessions per connection.
		 */
		private int maxSessionsPerConnection = 500;

		/**
		 * Sets the number of milliseconds to sleep between runs of the idle Connection eviction thread.
		 */
		private long timeBetweenEvictionRunsMillis = -1L;

		public boolean isEnabled() {
			return this.enabled;
		}

		public void setEnabled(boolean enabled) {
			this.enabled = enabled;
		}

		public int getMaxConnections() {
			return this.maxConnections;
		}

		public void setMaxConnections(int maxConnections) {
			this.maxConnections = maxConnections;
		}

		public int getIdleTimeMillis() {
			return this.idleTimeMillis;
		}

		public void setIdleTimeMillis(int idleTimeMillis) {
			this.idleTimeMillis = idleTimeMillis;
		}

		public long getExpiryTimeMillis() {
			return this.expiryTimeMillis;
		}

		public void setExpiryTimeMillis(long expiryTimeMillis) {
			this.expiryTimeMillis = expiryTimeMillis;
		}

		public int getMaxSessionsPerConnection() {
			return this.maxSessionsPerConnection;
		}

		public void setMaxSessionsPerConnection(int maxSessionsPerConnection) {
			this.maxSessionsPerConnection = maxSessionsPerConnection;
		}

		public long getTimeBetweenEvictionRunsMillis() {
			return this.timeBetweenEvictionRunsMillis;
		}

		public void setTimeBetweenEvictionRunsMillis(long timeBetweenEvictionRunsMillis) {
			this.timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;
		}
	}
}
