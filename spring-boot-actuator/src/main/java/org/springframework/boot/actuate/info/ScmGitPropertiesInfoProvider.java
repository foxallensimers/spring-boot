/*
 * Copyright 2012-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.boot.actuate.info;

import java.util.Properties;

import org.springframework.boot.bind.PropertiesConfigurationFactory;
import org.springframework.core.io.Resource;
import org.springframework.core.io.support.PropertiesLoaderUtils;

/**
 * A {@link InfoProvider} that provides git information extracted from the
 * git.properties file generated by the maven plugin
 * pl.project13.maven:git-commit-id-plugin.
 *
 * @author Meang Akira Tanaka
 * @since 1.3.0
 */
public class ScmGitPropertiesInfoProvider implements InfoProvider {

	private final Resource gitPropertiesResource;

	private final GitInfo gitInfo;

	public ScmGitPropertiesInfoProvider(Resource gitPropertiesResource) throws Exception {
		this.gitPropertiesResource = gitPropertiesResource;
		this.gitInfo = extractGitInfo();
	}

	@Override
	public String name() {
		return "git";
	}

	@Override
	public Info provide() {
		if (this.gitInfo == null) {
			return null;
		}

		Info result = new Info();

		result.put("branch", this.gitInfo.getBranch());
		result.put("commit", this.gitInfo.getCommit());

		return result;
	}


	private GitInfo extractGitInfo() throws Exception {
		PropertiesConfigurationFactory<GitInfo> factory = new PropertiesConfigurationFactory<GitInfo>(
				new GitInfo());
		factory.setTargetName("git");
		Properties properties = new Properties();
		if (this.gitPropertiesResource.exists()) {
			properties = PropertiesLoaderUtils.loadProperties(this.gitPropertiesResource);
		}
		else {
			return null;
		}
		factory.setProperties(properties);
		return factory.getObject();
	}


	/**
	 * Git info.
	 */
	public static class GitInfo {

		private String branch;

		private final Commit commit = new Commit();

		public String getBranch() {
			return this.branch;
		}

		public void setBranch(String branch) {
			this.branch = branch;
		}

		public Commit getCommit() {
			return this.commit;
		}

		/**
		 * Commit information.
		 */
		public static class Commit {

			private String id;

			private String time;

			public String getId() {
				return this.id == null ? ""
						: (this.id.length() > 7 ? this.id.substring(0, 7) : this.id);
			}

			public void setId(String id) {
				this.id = id;
			}

			public String getTime() {
				return this.time;
			}

			public void setTime(String time) {
				this.time = time;
			}

		}

	}
}
